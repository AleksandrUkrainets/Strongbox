// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Strongbox.Persistance;

#nullable disable

namespace Strongbox.Persistance.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250506161253_ServicesChanged")]
    partial class ServicesChanged
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Strongbox.Domain.Entities.AccessRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("AccessRequests");
                });

            modelBuilder.Entity("Strongbox.Domain.Entities.Decision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccessRequestId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApproverId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccessRequestId")
                        .IsUnique();

                    b.HasIndex("ApproverId");

                    b.ToTable("Decisions");
                });

            modelBuilder.Entity("Strongbox.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Content = "Content of Document 1",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Document 1"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Content = "Content of Document 2",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Document 2"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Content = "Content of Document 3",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Document 3"
                        });
                });

            modelBuilder.Entity("Strongbox.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "Regular User",
                            Role = 0
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Name = "Approver User",
                            Role = 1
                        });
                });

            modelBuilder.Entity("Strongbox.Domain.Entities.AccessRequest", b =>
                {
                    b.HasOne("Strongbox.Domain.Entities.Document", "Document")
                        .WithMany("AccessRequests")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Strongbox.Domain.Entities.User", "User")
                        .WithMany("AccessRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Strongbox.Domain.Entities.Decision", b =>
                {
                    b.HasOne("Strongbox.Domain.Entities.AccessRequest", "AccessRequest")
                        .WithOne("Decision")
                        .HasForeignKey("Strongbox.Domain.Entities.Decision", "AccessRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Strongbox.Domain.Entities.User", "Approver")
                        .WithMany("Decisions")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessRequest");

                    b.Navigation("Approver");
                });

            modelBuilder.Entity("Strongbox.Domain.Entities.AccessRequest", b =>
                {
                    b.Navigation("Decision");
                });

            modelBuilder.Entity("Strongbox.Domain.Entities.Document", b =>
                {
                    b.Navigation("AccessRequests");
                });

            modelBuilder.Entity("Strongbox.Domain.Entities.User", b =>
                {
                    b.Navigation("AccessRequests");

                    b.Navigation("Decisions");
                });
#pragma warning restore 612, 618
        }
    }
}
