// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Strongbox.Persistance;

#nullable disable

namespace Strongbox.Persistance.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250506185019_NewInit")]
    partial class NewInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Strongbox.Domain.Entities.AccessRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("AccessRequests");
                });

            modelBuilder.Entity("Strongbox.Domain.Entities.Decision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AccessRequestId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApproverId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccessRequestId")
                        .IsUnique();

                    b.HasIndex("ApproverId");

                    b.ToTable("Decisions");
                });

            modelBuilder.Entity("Strongbox.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Content = "Content of Document 1",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Document 1"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Content = "Content of Document 2",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Document 2"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Content = "Content of Document 3",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Document 3"
                        });
                });

            modelBuilder.Entity("Strongbox.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Name = "Approver User",
                            PasswordHash = new byte[] { 220, 107, 221, 150, 190, 60, 149, 239, 44, 12, 74, 149, 157, 2, 101, 86, 29, 175, 143, 160, 145, 213, 147, 46, 164, 25, 216, 60, 200, 28, 179, 59, 248, 58, 170, 88, 76, 28, 161, 64, 131, 133, 107, 159, 86, 213, 169, 146, 53, 209, 4, 203, 138, 1, 204, 121, 39, 200, 186, 137, 209, 160, 184, 2 },
                            PasswordSalt = new byte[] { 195, 234, 125, 97, 119, 143, 192, 105, 154, 48, 50, 29, 97, 106, 47, 190, 47, 51, 48, 107, 135, 243, 142, 117, 47, 86, 192, 200, 187, 157, 84, 197, 12, 174, 101, 182, 147, 250, 180, 53, 0, 3, 190, 9, 227, 63, 209, 177, 157, 166, 182, 50, 67, 120, 1, 210, 65, 243, 58, 49, 230, 29, 226, 70, 112, 157, 191, 186, 53, 48, 27, 70, 54, 86, 11, 171, 176, 39, 204, 204, 59, 43, 56, 43, 248, 210, 62, 59, 140, 2, 124, 110, 238, 143, 112, 200, 164, 26, 144, 98, 148, 152, 158, 175, 46, 20, 183, 226, 123, 135, 143, 64, 141, 49, 174, 233, 22, 33, 68, 76, 34, 55, 247, 213, 195, 66, 253, 23 },
                            Role = 1,
                            Username = "ApproverUser"
                        });
                });

            modelBuilder.Entity("Strongbox.Domain.Entities.AccessRequest", b =>
                {
                    b.HasOne("Strongbox.Domain.Entities.Document", "Document")
                        .WithMany("AccessRequests")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Strongbox.Domain.Entities.User", "User")
                        .WithMany("AccessRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Strongbox.Domain.Entities.Decision", b =>
                {
                    b.HasOne("Strongbox.Domain.Entities.AccessRequest", "AccessRequest")
                        .WithOne("Decision")
                        .HasForeignKey("Strongbox.Domain.Entities.Decision", "AccessRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Strongbox.Domain.Entities.User", "Approver")
                        .WithMany("Decisions")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessRequest");

                    b.Navigation("Approver");
                });

            modelBuilder.Entity("Strongbox.Domain.Entities.AccessRequest", b =>
                {
                    b.Navigation("Decision");
                });

            modelBuilder.Entity("Strongbox.Domain.Entities.Document", b =>
                {
                    b.Navigation("AccessRequests");
                });

            modelBuilder.Entity("Strongbox.Domain.Entities.User", b =>
                {
                    b.Navigation("AccessRequests");

                    b.Navigation("Decisions");
                });
#pragma warning restore 612, 618
        }
    }
}
